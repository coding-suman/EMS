{"version":3,"file":"static/js/859.6a5cfbd5.chunk.js","mappings":"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","sources":["pages/LandingPage.js","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["import React from 'react';\r\nimport { Box, Button, Flex, Heading, Stack, Text, VStack } from '@chakra-ui/react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LandingPage = () => {\r\n  return (\r\n    <Box>\r\n      <Flex\r\n        align=\"center\"\r\n        justify=\"center\"\r\n        height=\"100vh\"\r\n        bgGradient=\"linear(to-r, blue.500, teal.500)\"\r\n        color=\"white\"\r\n        textAlign=\"center\"\r\n      >\r\n        <VStack spacing={8}>\r\n          <Heading as=\"h1\" size=\"2xl\">\r\n            Welcome to the Employee Management System\r\n          </Heading>\r\n          <Text fontSize=\"lg\">\r\n            Streamline your workforce management with our intuitive platform.\r\n          </Text>\r\n          <Stack direction=\"row\" spacing={4}>\r\n            <Link to=\"/login\">\r\n              <Button colorScheme=\"teal\" variant=\"solid\">\r\n                Login\r\n              </Button>\r\n            </Link>\r\n            <Link to=\"/register\">\r\n              <Button colorScheme=\"teal\" variant=\"outline\">\r\n                Register\r\n              </Button>\r\n            </Link>\r\n          </Stack>\r\n        </VStack>\r\n      </Flex>\r\n\r\n      {/* Features Section */}\r\n      <Box py={16} px={8}>\r\n        <Heading as=\"h2\" size=\"xl\" mb={6} textAlign=\"center\">\r\n          Key Features\r\n        </Heading>\r\n        <Flex justify=\"center\" wrap=\"wrap\" spacing={8}>\r\n          <Box maxW=\"300px\" m={4} p={6} borderWidth={1} borderRadius=\"md\" textAlign=\"center\">\r\n            <Heading as=\"h3\" size=\"lg\" mb={4}>\r\n              Attendance Tracking\r\n            </Heading>\r\n            <Text>\r\n              Easily track employee attendance with automated check-in and check-out.\r\n            </Text>\r\n          </Box>\r\n          <Box maxW=\"300px\" m={4} p={6} borderWidth={1} borderRadius=\"md\" textAlign=\"center\">\r\n            <Heading as=\"h3\" size=\"lg\" mb={4}>\r\n              Employee Profiles\r\n            </Heading>\r\n            <Text>\r\n              Manage detailed employee profiles and keep all important information in one place.\r\n            </Text>\r\n          </Box>\r\n          <Box maxW=\"300px\" m={4} p={6} borderWidth={1} borderRadius=\"md\" textAlign=\"center\">\r\n            <Heading as=\"h3\" size=\"lg\" mb={4}>\r\n              Export Reports\r\n            </Heading>\r\n            <Text>\r\n              Export attendance records and other reports for payroll and compliance purposes.\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["LandingPage","_jsxs","Box","children","_jsx","Flex","align","justify","height","bgGradient","color","textAlign","VStack","spacing","Heading","as","size","Text","fontSize","Stack","direction","Link","to","Button","colorScheme","variant","py","px","mb","wrap","maxW","m","p","borderWidth","borderRadius","forwardRef","props","ref","styles","useStyleConfig","className","decoration","casing","rest","omitThemingProps","aliasedProps","object","clone","Object","assign","key","compact","textDecoration","textTransform","jsx","chakra","cx","__css","displayName","h2","StackItem","div","display","flex","minWidth","isInline","directionProp","divider","shouldWrapChildren","dividerStyle","useMemo","options","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","mapResponsive","value","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","Children","toArray","filter","child","isValidElement","getValidChildren","map","index","isLast","length","_child","clonedDivider","cloneElement","_divider","jsxs","Fragment","_className","alignItems","justifyContent","flexDirection","flexWrap","gap"],"sourceRoot":""}