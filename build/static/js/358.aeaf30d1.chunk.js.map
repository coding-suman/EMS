{"version":3,"file":"static/js/358.aeaf30d1.chunk.js","mappings":"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","sources":["pages/AdminDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  useDisclosure,\r\n  Select,\r\n  Text,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\nimport axios from '../utils/axiosConfig';\r\nimport { CSVLink } from 'react-csv';\r\nimport { toast } from 'react-toastify';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logout } from '../redux/authSlice';\r\n\r\nconst AdminDashboard = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [attendanceRecords, setAttendanceRecords] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\r\n  const [selectedMonth, setSelectedMonth] = useState('current');\r\n  const [selectedRecord, setSelectedRecord] = useState(null);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const fetchEmployees = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await axios.get('/employees', {\r\n          headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n        });\r\n        setEmployees(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching employees:', error);\r\n        toast.error('Failed to fetch employees.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  const fetchAttendanceRecords = async (employeeId, month = 'current') => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\r\n        `/attendance/admin?month=${month}&userId=${employeeId}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n        }\r\n      );\r\n      setAttendanceRecords(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching attendance records:', error);\r\n      toast.error('Failed to fetch attendance records.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEmployeeSelection = (employeeId) => {\r\n    setSelectedEmployee(employeeId);\r\n    fetchAttendanceRecords(employeeId, selectedMonth);\r\n  };\r\n\r\n  const handleMonthChange = (event) => {\r\n    const newMonth = event.target.value;\r\n    setSelectedMonth(newMonth);\r\n    if (selectedEmployee) {\r\n      fetchAttendanceRecords(selectedEmployee, newMonth);\r\n    }\r\n  };\r\n\r\n  const handleEditRecord = (record) => {\r\n    setSelectedRecord(record);\r\n    onOpen();\r\n  };\r\n\r\n  const handleSaveChanges = async () => {\r\n    try {\r\n      await axios.put(`/attendance/${selectedRecord._id}`, selectedRecord, {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n      });\r\n      toast.success('Attendance record updated successfully!');\r\n      onClose();\r\n      fetchAttendanceRecords(selectedEmployee, selectedMonth);\r\n    } catch (error) {\r\n      console.error('Error updating attendance record:', error);\r\n      toast.error('Failed to update attendance record!');\r\n    }\r\n  };\r\n\r\n  const headers = [\r\n    { label: \"First Name\", key: \"firstName\" },\r\n    { label: \"Last Name\", key: \"lastName\" },\r\n    { label: \"Email\", key: \"email\" },\r\n    { label: \"Check-In Time\", key: \"checkInTime\" },\r\n    { label: \"Check-Out Time\", key: \"checkOutTime\" },\r\n    { label: \"Total Working Hours\", key: \"totalWorkHours\" },\r\n    { label: \"Total Pause Time\", key: \"totalPauseTime\" },\r\n    { label: \"Status\", key: \"status\" },\r\n  ];\r\n\r\n  return (\r\n    <Box maxW=\"1200px\" mx=\"auto\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb={6}>\r\n        <Text fontSize=\"2xl\" fontWeight=\"bold\">Admin Dashboard</Text>\r\n      </Flex>\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <>\r\n          <Flex\r\n            direction={{ base: 'column', md: 'row' }}\r\n            alignItems=\"center\"\r\n            justifyContent=\"flex-start\"\r\n            mb={4}\r\n            gap={4}\r\n          >\r\n            <Select\r\n              placeholder=\"Select Employee\"\r\n              onChange={(e) => handleEmployeeSelection(e.target.value)}\r\n              value={selectedEmployee}\r\n              width={{ base: '100%', md: 'auto' }}\r\n            >\r\n              {employees.map((employee) => (\r\n                <option key={employee._id} value={employee._id}>\r\n                  {employee.firstName} {employee.lastName} - {employee.email}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n\r\n            <Select\r\n              value={selectedMonth}\r\n              onChange={handleMonthChange}\r\n              width={{ base: '100%', md: 'auto' }}\r\n            >\r\n              <option value=\"current\">Current Month</option>\r\n              <option value=\"2024-08\">August 2024</option>\r\n              <option value=\"2024-07\">July 2024</option>\r\n            </Select>\r\n\r\n            <Button colorScheme=\"teal\" mt={{ base: 2, md: 0 }}>\r\n              <CSVLink\r\n                data={attendanceRecords}\r\n                headers={headers}\r\n                filename=\"attendance_records.csv\"\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Export to CSV\r\n              </CSVLink>\r\n            </Button>\r\n          </Flex>\r\n\r\n          <Table variant=\"simple\">\r\n            <Thead>\r\n              <Tr>\r\n                <Th>First Name</Th>\r\n                <Th>Last Name</Th>\r\n                <Th>Email</Th>\r\n                <Th>Check-In Time</Th>\r\n                <Th>Check-Out Time</Th>\r\n                <Th>Total Working Hours</Th>\r\n                <Th>Total Pause Time</Th>\r\n                <Th>Status</Th>\r\n                <Th>Actions</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {attendanceRecords.map((record) => (\r\n                <Tr key={record._id}>\r\n                  <Td>{record.firstName}</Td>\r\n                  <Td>{record.lastName}</Td>\r\n                  <Td>{record.email}</Td>\r\n                  <Td>{new Date(record.checkInTime).toLocaleString()}</Td>\r\n                  <Td>{new Date(record.checkOutTime).toLocaleString()}</Td>\r\n                  <Td>{record.totalWorkHours ? record.totalWorkHours.toFixed(2) : '0.00'}</Td>\r\n                  <Td>{record.totalPauseTime ? record.totalPauseTime.toFixed(2) : '0.00'}</Td>\r\n                  <Td>{record.status}</Td>\r\n                  <Td>\r\n                    <Button onClick={() => handleEditRecord(record)}>Edit</Button>\r\n                  </Td>\r\n                </Tr>\r\n              ))}\r\n            </Tbody>\r\n          </Table>\r\n\r\n          <Modal isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n              <ModalHeader>Edit Attendance Record</ModalHeader>\r\n              <ModalCloseButton />\r\n              <ModalBody>\r\n                <FormControl>\r\n                  <FormLabel>Check-In Time</FormLabel>\r\n                  <Input\r\n                    type=\"datetime-local\"\r\n                    value={selectedRecord?.checkInTime ? new Date(selectedRecord.checkInTime).toISOString().slice(0, -1) : ''}\r\n                    onChange={(e) => setSelectedRecord({ ...selectedRecord, checkInTime: new Date(e.target.value).toISOString() })}\r\n                  />\r\n                </FormControl>\r\n                <FormControl mt={4}>\r\n                  <FormLabel>Check-Out Time</FormLabel>\r\n                  <Input\r\n                    type=\"datetime-local\"\r\n                    value={selectedRecord?.checkOutTime ? new Date(selectedRecord.checkOutTime).toISOString().slice(0, -1) : ''}\r\n                    onChange={(e) => setSelectedRecord({ ...selectedRecord, checkOutTime: new Date(e.target.value).toISOString() })}\r\n                  />\r\n                </FormControl>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button colorScheme=\"blue\" mr={3} onClick={handleSaveChanges}>\r\n                  Save\r\n                </Button>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n              </ModalFooter>\r\n            </ModalContent>\r\n          </Modal>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"names":["AdminDashboard","employees","setEmployees","useState","attendanceRecords","setAttendanceRecords","loading","setLoading","selectedEmployee","setSelectedEmployee","selectedMonth","setSelectedMonth","selectedRecord","setSelectedRecord","isOpen","onOpen","onClose","useDisclosure","useDispatch","useEffect","async","response","axios","get","headers","Authorization","localStorage","getItem","data","error","console","toast","fetchEmployees","fetchAttendanceRecords","employeeId","month","arguments","length","undefined","_jsxs","Box","maxW","mx","children","_jsx","Flex","alignItems","justifyContent","mb","Text","fontSize","fontWeight","Spinner","_Fragment","direction","base","md","gap","Select","placeholder","onChange","e","handleEmployeeSelection","target","value","width","map","employee","_id","firstName","lastName","email","event","newMonth","Button","colorScheme","mt","CSVLink","label","key","filename","className","Table","variant","Thead","Tr","Th","Tbody","record","Td","Date","checkInTime","toLocaleString","checkOutTime","totalWorkHours","toFixed","totalPauseTime","status","onClick","handleEditRecord","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","FormLabel","Input","type","toISOString","slice","ModalFooter","mr","put","success"],"sourceRoot":""}