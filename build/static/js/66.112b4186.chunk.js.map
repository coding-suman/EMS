{"version":3,"file":"static/js/66.112b4186.chunk.js","mappings":"6NAUA,MAgFA,EAhFcA,KACZ,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEX,KAAEC,EAAI,MAAEC,IAAUC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,OAE/CC,IAAoBJ,GAE1BK,EAAAA,EAAAA,YAAU,KACJD,IAEiB,WAAX,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMO,MACRX,EAAS,UACe,cAAX,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMO,OACfX,EAAS,cAEb,GACC,CAACS,EAAiBL,EAAMJ,IAE3B,MAAM,SAAEY,EAAQ,aAAEC,EAAcC,WAAW,OAAEC,KAAaC,EAAAA,EAAAA,IAAQ,CAChEC,UAAUC,EAAAA,EAAAA,GAAYC,EAAAA,KAyBxB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4DAA2DC,UACxEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oDAAmDC,SAAA,EAChEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCC,SAAC,gBACpDC,EAAAA,EAAAA,MAAA,QAAMC,SAAUX,GA1BLY,UACf,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,KAAK,aAAcC,GAEhDC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUP,EAASG,KAAKzB,OAC1D0B,aAAaC,QAAQ,QAASL,EAASG,KAAKxB,OAE5CH,GAASgC,EAAAA,EAAAA,IAAMR,EAASG,OAExBM,EAAAA,GAAMC,QAAQ,2BAEkB,UAA5BV,EAASG,KAAKzB,KAAKO,KACrBX,EAAS,UAC4B,aAA5B0B,EAASG,KAAKzB,KAAKO,MAC5BX,EAAS,aAEb,CAAE,MAAOqC,GACPC,QAAQD,MAAM,gBAAiBA,GAC/BF,EAAAA,GAAME,MAAM,+CACd,KAO4ChB,UAAU,YAAWC,SAAA,EAC3DC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,0CAAyCC,SAAC,YAC3DF,EAAAA,EAAAA,KAAA,SACEmB,KAAK,WACD3B,EAAS,SACbS,UAAU,4DAEXN,EAAOyB,QAASpB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAAsBC,SAAEP,EAAOyB,MAAMC,cAErElB,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,0CAAyCC,SAAC,eAC3DF,EAAAA,EAAAA,KAAA,SACEmB,KAAK,cACD3B,EAAS,YACbS,UAAU,4DAEXN,EAAO2B,WAAYtB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAAsBC,SAAEP,EAAO2B,SAASD,cAE3ErB,EAAAA,EAAAA,KAAA,UACEmB,KAAK,SACLlB,UAAU,iFAAgFC,SAC3F,iBAKD,C,uDCpFH,MAAMH,EAAwBwB,EAAAA,KAAaC,MAAM,CACtDJ,MAAOG,EAAAA,KAAaH,MAAM,wBAAwBK,SAAS,qBAC3DH,SAAUC,EAAAA,KAAaG,IAAI,EAAG,+CAA+CD,SAAS,0BAG3EE,EAA2BJ,EAAAA,KAAaC,MAAM,CACzDI,SAAUL,EAAAA,KAAaE,SAAS,0BAChCI,SAAUN,EAAAA,KAAaE,SAAS,yBAChCL,MAAOG,EAAAA,KAAaH,MAAM,wBAAwBK,SAAS,qBAC3DH,SAAUC,EAAAA,KAAaG,IAAI,EAAG,+CAA+CD,SAAS,wBACtFK,gBAAiBP,EAAAA,KACdQ,MAAM,CAACR,EAAAA,GAAQ,YAAa,MAAO,wBACnCE,SAAS,iC","sources":["pages/Login.js","utils/validationSchemas.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { loginValidationSchema } from '../utils/validationSchemas';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { login } from '../redux/authSlice';\r\nimport axios from '../utils/axiosConfig';\r\nimport { toast } from 'react-toastify';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const { user, token } = useSelector((state) => state.auth);\r\n\r\n  const isAuthenticated = !!token;\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n\r\n      if (user?.role === 'Admin') {\r\n        navigate('/admin');\r\n      } else if (user?.role === 'Employee') {\r\n        navigate('/dashboard');\r\n      }\r\n    }\r\n  }, [isAuthenticated, user, navigate]);\r\n\r\n  const { register, handleSubmit, formState: { errors } } = useForm({\r\n    resolver: yupResolver(loginValidationSchema)\r\n  });\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      const response = await axios.post('auth/login', data);\r\n\r\n      localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      localStorage.setItem('token', response.data.token);\r\n\r\n      dispatch(login(response.data));\r\n\r\n      toast.success('Logged in successfully!');\r\n\r\n      if (response.data.user.role === 'Admin') {\r\n        navigate('/admin');\r\n      } else if (response.data.user.role === 'Employee') {\r\n        navigate('/dashboard');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      toast.error('Login failed. Please check your credentials.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-100\">\r\n      <div className=\"w-full max-w-md p-8 bg-white shadow-md rounded-lg\">\r\n        <h1 className=\"text-2xl font-bold mb-6 text-center\">Login Page</h1>\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              {...register('email')}\r\n              className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md\"\r\n            />\r\n            {errors.email && <p className=\"text-red-500 text-sm\">{errors.email.message}</p>}\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              {...register('password')}\r\n              className=\"mt-1 block w-full p-2 border border-gray-300 rounded-md\"\r\n            />\r\n            {errors.password && <p className=\"text-red-500 text-sm\">{errors.password.message}</p>}\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full py-2 px-4 bg-blue-500 text-white font-bold rounded-md hover:bg-blue-600\"\r\n          >\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import * as yup from 'yup';\r\n\r\nexport const loginValidationSchema = yup.object().shape({\r\n  email: yup.string().email('Invalid email format').required('Email is required'),\r\n  password: yup.string().min(6, 'Password must be at least 6 characters long').required('Password is required'),\r\n});\r\n\r\nexport const registerValidationSchema = yup.object().shape({\r\n  firtname: yup.string().required('First name is required'),\r\n  lastname: yup.string().required('Lats name is required'),\r\n  email: yup.string().email('Invalid email format').required('Email is required'),\r\n  password: yup.string().min(6, 'Password must be at least 6 characters long').required('Password is required'),\r\n  confirmPassword: yup.string()\r\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\r\n    .required('Confirm password is required'),\r\n});\r\n"],"names":["Login","navigate","useNavigate","dispatch","useDispatch","user","token","useSelector","state","auth","isAuthenticated","useEffect","role","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","loginValidationSchema","_jsx","className","children","_jsxs","onSubmit","async","response","axios","post","data","localStorage","setItem","JSON","stringify","login","toast","success","error","console","type","email","message","password","yup","shape","required","min","registerValidationSchema","firtname","lastname","confirmPassword","oneOf"],"sourceRoot":""}